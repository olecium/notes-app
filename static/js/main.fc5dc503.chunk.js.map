{"version":3,"sources":["Color.jsx","NoteEditor.jsx","Search.jsx","Note.jsx","NotesGrid.jsx","App.js","registerServiceWorker.js","index.js"],"names":["Color","props","state","colors","name","id","handleColorPick","bind","e","newColor","target","value","this","setState","color","onColorChange","basicColor","refs","className","map","style","backgroundColor","ref","key","onClick","defaultValue","Component","NoteEditor","text","handleTextChange","handleNoteAdd","handleNewColor","newNote","Date","now","onNoteAdd","rows","placeholder","onChange","Search","search","displayedNotes","notes","onSearch","onReset","onTextChange","onSearchReset","searchQuery","toLowerCase","filter","el","indexOf","onNoteSearch","resetSearch","onRef","undefined","type","Note","onDelete","children","NotesGrid","grid","msnry","Masonry","itemSelector","columnWidth","gutter","prevProps","length","reloadItems","layout","onNoteDelete","result","note","App","searchedNotes","handleNoteDelete","handleNoteSearch","localNotes","JSON","parse","localStorage","getItem","_updateLocalStorage","noteId","newSearchedNotes","newNotes","slice","unshift","child","stringify","setItem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fc5dc503.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Color extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n          colors: [{ \r\n                        name: 'yellow', \r\n                        id:1\r\n                    },{\r\n                        name: 'red',\r\n                        id: 2\r\n                    },{\r\n                        name:'purple',\r\n                        id: 3\r\n                    },{\r\n                        name:'blue',\r\n                        id: 4\r\n                    }]   \r\n        };\r\n        this.handleColorPick = this.handleColorPick.bind(this);\r\n    }\r\n    handleColorPick(e){\r\n        let newColor = e.target.value;\r\n        this.setState({ color: newColor});\r\n        this.props.onColorChange(newColor);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let basicColor = this.refs.color.value;\r\n        this.setState({ color: basicColor });\r\n        this.props.onColorChange(basicColor);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"color-picker\">\r\n                {\r\n                    this.state.colors.map( (color) => { \r\n                        let style = {backgroundColor: color.name}; \r\n                        return (<input className=\"pick-color\" ref=\"color\" key={color.id} onClick={this.handleColorPick} defaultValue={color.name} style={style} />); \r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nColor.propTypes = {\r\n    onColorChange: PropTypes.func,\r\n}\r\n\r\nexport default Color;","import React, { Component } from 'react';\r\nimport Color from './Color.jsx';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass NoteEditor extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {text: ''};\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n        this.handleNoteAdd = this.handleNoteAdd.bind(this);\r\n        this.handleNewColor = this.handleNewColor.bind(this);\r\n    }\r\n\r\n    handleTextChange(e){\r\n        this.setState({ text: e.target.value });    \r\n    }\r\n\r\n    handleNoteAdd(){\r\n\r\n        let newNote = {\r\n            text: this.state.text,\r\n            id: Date.now(),\r\n            color: this.state.color\r\n        };\r\n        this.props.onNoteAdd(newNote);\r\n        this.setState({ text: '' });\r\n    }\r\n\r\n    handleNewColor(color){\r\n        this.setState({ color: color });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"note-editor\">\r\n                <textarea className=\"textarea\" rows={5} placeholder=\"Type your note text\" onChange={this.handleTextChange} value={this.state.text}></textarea>\r\n                <Color onColorChange={this.handleNewColor} />\r\n                <button className=\"add-button\" onClick={this.handleNoteAdd}>Add</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNoteEditor.propTypes = {\r\n    onNoteAdd: PropTypes.func,\r\n}\r\n\r\nexport default NoteEditor;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Search extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { search: '', displayedNotes: this.props.notes, value: '' };\r\n        this.onSearch = this.onSearch.bind(this);\r\n        this.onReset = this.onReset.bind(this);\r\n        this.onTextChange = this.onTextChange.bind(this);\r\n        this.onSearchReset = this.onSearchReset.bind(this);\r\n    }\r\n\r\n    onTextChange(e){\r\n        let searchQuery = e.target.value;\r\n        this.setState({ search: searchQuery, value: searchQuery  });\r\n    }\r\n\r\n    onSearch(){\r\n        let searchQuery = this.state.search.toLowerCase();\r\n        \r\n        let displayedNotes = this.props.notes.filter((el) => {\r\n            let searchArrValue = el.text.toLowerCase();\r\n            return searchArrValue.indexOf(searchQuery) !== -1;\r\n        });\r\n\r\n        this.setState({ displayedNotes: displayedNotes, value: searchQuery });\r\n        let resetSearch = false;\r\n        this.props.onNoteSearch(displayedNotes, resetSearch);\r\n    }\r\n    onReset(){\r\n        this.setState({ displayedNotes: this.props.notes });\r\n        let resetSearch = false;\r\n        resetSearch = this.onSearchReset();\r\n        this.props.onNoteSearch(this.props.notes, resetSearch);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.onRef(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.onRef(undefined);\r\n    }\r\n\r\n    onSearchReset(){\r\n        this.setState({ value: '' });\r\n        return true;\r\n    }\r\n\r\n    render(){ \r\n        return(\r\n            <div className=\"search\">\r\n                <h6>Look for notes</h6>\r\n                <input className=\"search-field\" onChange={this.onTextChange} type=\"text\" value={this.state.value} />\r\n                <button onClick={this.onSearch} className=\"search-button\">Search</button>\r\n                <button onClick={this.onReset} className=\"reset-button\">Show all notes</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSearch.propTypes = {\r\n    notes: PropTypes.array,\r\n    onNoteSearch: PropTypes.func,\r\n    onRef: PropTypes.func,\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Note extends Component{\r\n    render(){\r\n        let style = { backgroundColor: this.props.color };\r\n        return(\r\n            <div className=\"note\" style={style}>\r\n                <span className=\"delete-note\" onClick={this.props.onDelete}>x</span>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNote.propTypes = {\r\n  color: PropTypes.string,\r\n  children: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nexport default Note;\r\n","import React, { Component } from 'react';\r\nimport Note from './Note.jsx';\r\nimport Masonry from 'masonry-layout';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass NotesGrid extends Component{\r\n    \r\n    componentDidMount(){\r\n        let grid = this.refs.grid;\r\n        this.msnry = new Masonry(grid, {\r\n            itemSelector: '.note',\r\n            columnWidth: 200,\r\n            gutter: 10\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.notes.length !== prevProps.notes.length){\r\n            this.msnry.reloadItems();\r\n            this.msnry.layout();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let onNoteDelete = this.props.onNoteDelete;\r\n\r\n        const result = (this.props.notes.length > 0) \r\n                        ? this.props.notes.map((note) => <Note key={note.id} onDelete={onNoteDelete.bind(null, note)} color={note.color}>{note.text}</Note>)\r\n                        :<h1>No notes found...</h1>;\r\n\r\n        return(\r\n            <div className=\"notes-grid\" ref=\"grid\">\r\n                {result}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNotesGrid.propTypes = {\r\n    notes: PropTypes.array,\r\n    onNoteDelete: PropTypes.func,\r\n}\r\n\r\nexport default NotesGrid;","import React, { Component } from 'react';\nimport NoteEditor from './NoteEditor.jsx'\nimport Search from './Search.jsx'\nimport NotesGrid from './NotesGrid.jsx'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      notes: [],\n      searchedNotes: [],\n      value: ''\n    };\n\n    this.handleNoteAdd = this.handleNoteAdd.bind(this);\n    this.handleNoteDelete = this.handleNoteDelete.bind(this);\n    this.handleNoteSearch = this.handleNoteSearch.bind(this);\n  }\n\n  componentDidMount() {\n    let localNotes = JSON.parse(localStorage.getItem('notes'));\n    if (localNotes) {\n      this.setState({ notes: localNotes, searchedNotes: localNotes });\n    }\n  }\n\n  componentDidUpdate() {\n    this._updateLocalStorage();\n  }\n\n  handleNoteDelete(note) {\n    let noteId = note.id;\n    let newSearchedNotes = this.state.searchedNotes.filter((note) => note.id !== noteId);\n    let newNotes = this.state.notes.filter((note) => note.id !== noteId);\n    this.setState({ notes: newNotes, searchedNotes: newSearchedNotes });\n    //this.child.onSearchReset();                 //reset search field\n  }\n\n  handleNoteAdd(newNote) {\n    let newNotes = this.state.notes.slice();    // creating copy of the notes array\n    newNotes.unshift(newNote);\n    this.setState({ notes: newNotes, searchedNotes: newNotes });\n    this.child.onSearchReset();                 //reset search field\n  }\n\n  handleNoteSearch(displayedNotes, resetSearch) {\n    let searchedNotes = displayedNotes.slice();\n    if (resetSearch === true) {\n      this.setState({ searchedNotes: this.state.notes });\n    }\n    else {\n      this.setState({ notes: this.state.notes, searchedNotes: searchedNotes });\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"note-app\">\n        <Search onRef={ref => (this.child = ref)} notes={this.state.searchedNotes} onNoteSearch={this.handleNoteSearch} value={this.state.value} />\n        <NoteEditor onNoteAdd={this.handleNoteAdd} />\n        <NotesGrid notes={this.state.searchedNotes} onNoteDelete={this.handleNoteDelete} />\n      </div>\n    );\n  }\n\n  _updateLocalStorage() {\n    let notes = JSON.stringify(this.state.notes);\n    localStorage.setItem('notes', notes);\n  }\n}\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}